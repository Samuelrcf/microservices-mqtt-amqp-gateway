package br.gov.upanema.academicpass.components.alunos.web.mappers;

import java.util.ArrayList;
import java.util.List;

import br.gov.upanema.academicpass.components.alunos.application.mappers.horario.HorarioMapper;
import br.gov.upanema.academicpass.components.alunos.domain.models.Aluno;
import br.gov.upanema.academicpass.components.alunos.web.dtos.BuscarAlunoDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.CarteirinhaDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.ListarAlunoDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.SalvarAlunoDto;
import br.gov.upanema.academicpass.components.instituicoes.application.mappers.InstituicaoMapper;
import br.gov.upanema.academicpass.components.user.application.mappers.UserMapper;

public class AlunoMapper {

	public static Aluno salvarAlunoDtoToAluno(SalvarAlunoDto dto) {
		Aluno aluno = new Aluno();
		aluno.setNomeCompleto(dto.getNomeCompleto());
		aluno.setInstituicao(InstituicaoMapper.instituicaoIdDtoToInstituicao(dto.getInstituicaoId()));
		aluno.setCurso(dto.getCurso());
		aluno.setTelefone(dto.getTelefone());
		aluno.setHorarios(HorarioMapper.salvarHorarioDtoListToHorario(dto.getHorariosDto()));
		aluno.setDataDeNascimento(dto.getDataDeNascimento());
		aluno.setUser(UserMapper.saveUserDtoToUser(dto.getSalvarUserDto()));
		return aluno;
	}
	
	public static BuscarAlunoDto alunoToBuscarAlunoDto(Aluno aluno) {
		BuscarAlunoDto dto = new BuscarAlunoDto();
		dto.setNomeCompleto(aluno.getNomeCompleto());
		dto.setCurso(aluno.getCurso());
		if(aluno.getInstituicao() != null) { // instituição pode ser null caso seja excluída
			dto.setInstituicaoDto(InstituicaoMapper.instituicaoToBuscarInstituicaoDtoForAluno(aluno.getInstituicao())); // retornar instituição sem aluno para não haver loop
		}
		dto.setHorariosDto(HorarioMapper.horarioListToBuscarHorarioDto(aluno.getHorarios()));
		dto.setTelefone(aluno.getTelefone());
		dto.setId(aluno.getId());
		dto.setDataDeCadastro(aluno.getDataDeCadastro());
		dto.setDataDeNascimento(aluno.getDataDeNascimento());
		dto.setCarteiraExpirada(aluno.getCarteiraExpirada());
		return dto;
	}
	
	public static ListarAlunoDto alunoToListarAlunoDto(Aluno aluno) {
		ListarAlunoDto dto = new ListarAlunoDto();
		dto.setNomeCompleto(aluno.getNomeCompleto());
		dto.setCurso(aluno.getCurso());
		if(aluno.getInstituicao() != null) { // instituição pode ser null caso seja excluída
			dto.setInstituicaoDto(InstituicaoMapper.instituicaoToBuscarInstituicaoDtoForAluno(aluno.getInstituicao())); // retornar instituição sem aluno para não haver loop
		}
		dto.setId(aluno.getId());
		dto.setCarteiraExpirada(aluno.getCarteiraExpirada());
		return dto;
	}
	
	public static CarteirinhaDto alunoToCarteirinhaDto(Aluno aluno) {
		CarteirinhaDto dto = new CarteirinhaDto();
		dto.setNomeCompleto(aluno.getNomeCompleto());
		dto.setCurso(aluno.getCurso());
		if(aluno.getInstituicao() != null) { // instituição pode ser null caso seja excluída
			dto.setInstituicaoDto(InstituicaoMapper.instituicaoToBuscarInstituicaoDtoForAluno(aluno.getInstituicao())); // retornar instituição sem aluno para não haver loop
		}
		dto.setHorariosDto(HorarioMapper.horarioListToBuscarHorarioDto(aluno.getHorarios()));
		dto.setTelefone(aluno.getTelefone());
		dto.setId(aluno.getId());
		return dto;
	}
	
	public static List<BuscarAlunoDto> alunoListToBuscarAlunoDto(List<Aluno> alunos) {
		List<BuscarAlunoDto> dtos = new ArrayList<>();
		for(Aluno aluno : alunos) {
			dtos.add(alunoToBuscarAlunoDto(aluno));
		}
		return dtos;
	}
}
