package br.gov.upanema.academicpass.components.alunos.web.controllers;

import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import br.gov.upanema.academicpass.components.alunos.application.mappers.horario.HorarioMapper;
import br.gov.upanema.academicpass.components.alunos.application.usecases.AlunoService;
import br.gov.upanema.academicpass.components.alunos.domain.enums.DiasDaSemana;
import br.gov.upanema.academicpass.components.alunos.domain.enums.Turnos;
import br.gov.upanema.academicpass.components.alunos.domain.models.Aluno;
import br.gov.upanema.academicpass.components.alunos.domain.models.Horario;
import br.gov.upanema.academicpass.components.alunos.web.dtos.BuscarAlunoDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.CarteirinhaDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.ListarAlunoDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.SalvarAlunoDto;
import br.gov.upanema.academicpass.components.alunos.web.dtos.horario.AtualizarHorarioDto;
import br.gov.upanema.academicpass.components.alunos.web.mappers.AlunoMapper;
import br.gov.upanema.academicpass.shared.response.ApiSuccessResponse;
import br.gov.upanema.academicpass.shared.response.GlobalConstants;
import br.gov.upanema.academicpass.shared.response.ResponseUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/api/v1/alunos")
@Tag(name = "Alunos", description = "Endpoints para gerenciamento de alunos")
public class AlunoController {

    AlunoService alunoService;

    @Operation(summary = "Buscar aluno por ID",
            description = "Permite que usuários com a role ADMIN busquem um aluno pelo ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Aluno encontrado com sucesso."),
            @ApiResponse(responseCode = "404", description = "Aluno não encontrado para o ID informado.")
    })
    @GetMapping("/{id}")
    public ResponseEntity<ApiSuccessResponse<BuscarAlunoDto>> fetchById(@PathVariable Long id, HttpServletRequest request) {
        Aluno aluno = alunoService.fetchById(id);
        BuscarAlunoDto dto = AlunoMapper.alunoToBuscarAlunoDto(aluno);

        ApiSuccessResponse<BuscarAlunoDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar perfil do aluno", description = "Permite que o aluno autenticado tenha acesso a seus dados.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Perfil do aluno encontrado com sucesso."),
            @ApiResponse(responseCode = "401", description = "Usuário não autenticado.")
    })
    @GetMapping("/profile")
    public ResponseEntity<ApiSuccessResponse<BuscarAlunoDto>> fetchProfile(HttpServletRequest request) {
        Aluno aluno = alunoService.fetchProfile();
        BuscarAlunoDto dto = AlunoMapper.alunoToBuscarAlunoDto(aluno);

        ApiSuccessResponse<BuscarAlunoDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar carteirinha do aluno", description = "Retorna a carteirinha do aluno com o ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Carteirinha encontrada com sucesso."),
            @ApiResponse(responseCode = "404", description = "Aluno não encontrado para o ID informado.")
    })
    @GetMapping("/{id}/carteirinha")
    public ResponseEntity<ApiSuccessResponse<CarteirinhaDto>> fetchCarteirinhaById(@PathVariable Long id, HttpServletRequest request) {
        Aluno aluno = alunoService.fetchCarteirinhaById(id);
        CarteirinhaDto dto = AlunoMapper.alunoToCarteirinhaDto(aluno);

        ApiSuccessResponse<CarteirinhaDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar carteirinha do aluno", description = "Permite que o aluno autenticado visualize sua carteirinha.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Carteirinha encontrada com sucesso."),
            @ApiResponse(responseCode = "404", description = "Aluno não encontrado para o ID informado.")
    })
    @GetMapping("/profile/carteirinha")
    public ResponseEntity<ApiSuccessResponse<CarteirinhaDto>> fetchProfileCarteirinha(HttpServletRequest request) {
        Aluno aluno = alunoService.fetchProfileCarteirinha();
        CarteirinhaDto dto = AlunoMapper.alunoToCarteirinhaDto(aluno);

        ApiSuccessResponse<CarteirinhaDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Listar todos os alunos", description = "Retorna uma lista paginada de todos os alunos.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchAll(@RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {
        Page<Aluno> alunos = alunoService.fetchAll(page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos por dia e turno", description = "Retorna uma lista paginada de alunos que possuem aula no dia e turno informados.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping("/horarios")
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchAlunosByHorario(
            @RequestParam DiasDaSemana dia,
            @RequestParam Turnos turno, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchAlunosByHorario(dia, turno, page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Contar alunos por dia e turno", description = "Retorna uma lista paginada da quantidade de alunos que possuem aula no dia e turno informados.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Quantidade de alunos retornada com sucesso.")
    })
    @GetMapping("/quantidade-por-dia-e-turno")
    public ResponseEntity<ApiSuccessResponse<Integer>> fetchAlunosByHorario(@RequestParam DiasDaSemana dia, @RequestParam Turnos turno, HttpServletRequest request) {

        Integer quantidadeDeAlunosPorDiaETurno = alunoService.countAlunosByDiaDaSemanaAndTurno(dia, turno);

        ApiSuccessResponse<Integer> response = ResponseUtil.success(quantidadeDeAlunosPorDiaETurno, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos por instituição", description = "Retorna uma lista paginada de alunos pertencentes à instituição com ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso."),
            @ApiResponse(responseCode = "404", description = "Instituição não encontrada com ID informado.")
    })
    @GetMapping("/instituicoes/{instituicaoId}")
    // busca criada para evitar sobrecarrega na requisição que retorna todos os alunos na busca por instituição (fetchById)
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchAlunosByInstituicao(@PathVariable Long instituicaoId, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchAlunosByInstituicao(instituicaoId, page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos por nome", description = "Retorna uma lista paginada de alunos cujo nome contém a string informada.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping("/nomes")
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchAlunosByNome(@RequestParam String nome, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchAlunosByNome(nome, page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos com renovação não confirmada", description = "Retorna uma lista paginada de alunos cuja renovação ainda não foi confirmada.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping("/nao-confirmado")
    public ResponseEntity<ApiSuccessResponse<Page<BuscarAlunoDto>>> fetchRenovacoesNaoConfirmadas(@RequestParam String nome, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchConfirmadoFalse(nome, page, size);
        Page<BuscarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToBuscarAlunoDto);

        ApiSuccessResponse<Page<BuscarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos com renovação confirmada", description = "Retorna uma lista paginada de alunos cuja renovação foi confirmada.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping("/confirmado")
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchRenovacoesConfirmadas(@RequestParam String nome, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchConfirmadoTrueAndCarteiraExpiradaFalse(nome, page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos com carteirinha não expirada", description = "Retorna uma lista paginada de alunos cuja carteirinha não expirou.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping("/carteirinhas-nao-expiradas")
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchCarteirinhaExpiradaFalse(@RequestParam String nome, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchCarteirinhaExpiradaFalse(nome, page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar alunos com carteirinha expirada", description = "Retorna uma lista paginada de alunos cuja carteirinha expirou.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de alunos retornada com sucesso.")
    })
    @GetMapping("/carteirinhas-expiradas")
    public ResponseEntity<ApiSuccessResponse<Page<ListarAlunoDto>>> fetchCarteirinhaExpiradaTrue(
            @RequestParam String nome, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size, HttpServletRequest request) {

        Page<Aluno> alunos = alunoService.fetchCarteirinhaExpiradaTrue(nome, page, size);
        Page<ListarAlunoDto> dtos = alunos.map(AlunoMapper::alunoToListarAlunoDto);

        ApiSuccessResponse<Page<ListarAlunoDto>> response = ResponseUtil.success(dtos, GlobalConstants.MESSAGE_RESOURCE_FETCHED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Cadastrar novo aluno", description = "Cria um novo aluno no sistema.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Aluno criado com sucesso."),
            @ApiResponse(responseCode = "400", description = "Dados inválidos enviados na requisição.")
    })
    @PostMapping
    public ResponseEntity<ApiSuccessResponse<ListarAlunoDto>> save(@Valid @RequestBody SalvarAlunoDto salvarAlunoDto, HttpServletRequest request) {
        Aluno aluno = AlunoMapper.salvarAlunoDtoToAluno(salvarAlunoDto);
        ListarAlunoDto dto = AlunoMapper.alunoToListarAlunoDto(alunoService.save(aluno));

        ApiSuccessResponse<ListarAlunoDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_CREATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Enviar atestado de matrícula", description = "Permite que o aluno autenticado renove seu atestado de matrícula.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Atestado enviado com sucesso."),
            @ApiResponse(responseCode = "400", description = "Erro ao processar o arquivo.")
    })
    @PutMapping(value = "/profile/atestado", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiSuccessResponse<Void>> saveProfileFile(@RequestParam MultipartFile arquivo, HttpServletRequest request) {
        alunoService.renewCertificate(arquivo);

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_CREATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Enviar documentos do aluno", description = "Faz upload de múltiplos documentos para um aluno.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Documentos enviados com sucesso."),
            @ApiResponse(responseCode = "400", description = "Erro ao processar os arquivos.")
    })
    @PostMapping(value = "/{id}/documentos", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiSuccessResponse<Void>> uploadDocumentos(
            @PathVariable Long id,
            @RequestParam(required = true) MultipartFile atestado,
            @RequestParam(required = true) MultipartFile rg,
            @RequestParam(required = false) MultipartFile cpf,
            @RequestParam(required = true) MultipartFile comprovanteDeResidencia,
            HttpServletRequest request) {

        alunoService.saveDocuments(id, atestado, rg, cpf, comprovanteDeResidencia);

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_CREATED,
                request.getRequestURI()
        );

        return ResponseEntity.ok(response);
    }

    @Operation(summary = "Visualizar documento do aluno", description = "Permite visualizar um documento específico do aluno com ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Documento encontrado e retornado com sucesso."),
            @ApiResponse(responseCode = "404", description = "Documento não encontrado.")
    })
    @GetMapping("/{id}/documentos")
    public ResponseEntity<Resource> fetchDocument(
            @PathVariable Long id,
            @RequestParam String documentName) {

        Resource file = alunoService.fetchDocument(id, documentName);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=" + documentName)
                .contentType(MediaType.APPLICATION_PDF)
                .body(file);
    }

    @Operation(summary = "Visualizar documento do aluno autenticado", description = "Permite que o aluno autenticado visualize um documento específico próprio.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Documento encontrado e retornado com sucesso."),
            @ApiResponse(responseCode = "404", description = "Documento não encontrado.")
    })
    @GetMapping("/profile/documentos")
    public ResponseEntity<Resource> fetchProfileDocument(@RequestParam String documentName) {

        Resource file = alunoService.fetchProfileDocument(documentName);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=" + documentName)
                .contentType(MediaType.APPLICATION_PDF)
                .body(file);
    }

    @Operation(summary = "Enviar foto do aluno", description = "Faz upload da sda de perfil do aluno com ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Imagem enviada com sucesso."),
            @ApiResponse(responseCode = "400", description = "Erro ao processar a imagem.")
    })
    @PostMapping(value = "/{id}/imagem", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiSuccessResponse<Void>> saveImage(@PathVariable Long id, @RequestParam MultipartFile imagem, HttpServletRequest request) {
        alunoService.saveImage(id, imagem);

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_CREATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Atualizar foto do aluno", description = "Permite que o aluno autenticado atualize sua foto de perfil.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Imagem enviada com sucesso."),
            @ApiResponse(responseCode = "400", description = "Erro ao processar a imagem.")
    })
    @PutMapping(value = "/profile/imagem", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiSuccessResponse<Void>> changeProfileImage(@RequestParam MultipartFile imagem, HttpServletRequest request) {
        alunoService.changeImage(imagem);

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_CREATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Buscar imagem do aluno", description = "Retorna a imagem de perfil do aluno com o ID especificado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Imagem retornada com sucesso."),
            @ApiResponse(responseCode = "404", description = "Imagem não encontrada.")
    })
    @GetMapping("/{id}/imagem")
    public ResponseEntity<Resource> fetchImage(@PathVariable Long id, HttpServletRequest request) {

        Resource resource = alunoService.fetchImage(id);

        String contentType = "application/octet-stream";
        try {
            contentType = Files.probeContentType(resource.getFile().toPath());
        } catch (IOException e) {
            e.printStackTrace();
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .body(resource);
    }

    @Operation(summary = "Buscar imagem do perfil do aluno autenticado", description = "Permite que o aluno autenticado busque sua foto de perfil.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Imagem retornada com sucesso."),
            @ApiResponse(responseCode = "404", description = "Imagem não encontrada.")
    })
    @GetMapping("/profile/imagem")
    public ResponseEntity<Resource> fetchProfileImage(HttpServletRequest request) {

        Resource resource = alunoService.fetchProfileImage();

        String contentType = "application/octet-stream";
        try {
            contentType = Files.probeContentType(resource.getFile().toPath());
        } catch (IOException e) {
            e.printStackTrace();
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .body(resource);
    }

    @Operation(summary = "Atualizar horários do aluno autenticado", description = "Permite que o aluno autenticado atualize seus horários.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Horários atualizados com sucesso."),
            @ApiResponse(responseCode = "400", description = "Dados inválidos enviados na requisição.")
    })
    @PostMapping("/profile/horario")
    public ResponseEntity<ApiSuccessResponse<BuscarAlunoDto>> updateProfileHorario(@Valid @RequestBody AtualizarHorarioDto horariosDto, HttpServletRequest request) {
        List<Horario> horarios = HorarioMapper.salvarHorarioDtoListToHorario(horariosDto.getHorariosDto());
        BuscarAlunoDto dto = AlunoMapper.alunoToBuscarAlunoDto(alunoService.updateProfileHorario(horarios));

        ApiSuccessResponse<BuscarAlunoDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_UPDATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Atualizar telefone do aluno autenticado", description = "Permite que o aluno autenticado atualize seu número de telefone.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Telefone atualizado com sucesso."),
            @ApiResponse(responseCode = "400", description = "Dados inválidos enviados na requisição.")
    })
    @PutMapping("/profile/telefone")
    public ResponseEntity<ApiSuccessResponse<BuscarAlunoDto>> updateProfilePhoneNumber(@RequestParam String phoneNumber, HttpServletRequest request) {
        BuscarAlunoDto dto = AlunoMapper.alunoToBuscarAlunoDto(alunoService.updateProfilePhoneNumber(phoneNumber));

        ApiSuccessResponse<BuscarAlunoDto> response = ResponseUtil.success(dto, GlobalConstants.MESSAGE_RESOURCE_UPDATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Confirmar renovação do aluno", description = "Confirma ou cancela a renovação do aluno com o ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Renovação confirmada ou cancelada com sucesso."),
            @ApiResponse(responseCode = "404", description = "Aluno não encontrado.")
    })
    @PutMapping("/{id}/confirmar")
    public ResponseEntity<ApiSuccessResponse<Void>> confirmRenewal(@PathVariable Long id, @RequestParam boolean confirmation, HttpServletRequest request) {

        alunoService.confirmRenewal(id, confirmation);

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_UPDATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Expirar alunos de uma instituição", description = "Anula a validade de todos os alunos de uma instituição específica.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Anulação feita com sucesso."),
            @ApiResponse(responseCode = "404", description = "Instituição não encontrada.")
    })
    @PutMapping("/{instituicaoId}/expirar")
    public ResponseEntity<ApiSuccessResponse<Void>> expireAlunosByInstitution(@PathVariable Long instituicaoId, HttpServletRequest request) {

        alunoService.expireAlunosByInstitution(instituicaoId);

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_UPDATED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @Operation(summary = "Deletar perfil do aluno autenticado", description = "Permite que o aluno autenticado delete seu perfil.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Perfil deletado com sucesso."),
            @ApiResponse(responseCode = "404", description = "Perfil não encontrado.")
    })
    @DeleteMapping("/profile")
    public ResponseEntity<ApiSuccessResponse<Void>> deleteProfile(HttpServletRequest request) {
        alunoService.deleteProfile();

        ApiSuccessResponse<Void> response = ResponseUtil.success(null, GlobalConstants.MESSAGE_RESOURCE_DELETED, request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}
