package com.ufersa.mqttservice.services;

import java.util.Arrays;
import java.util.List;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.annotation.PostConstruct;

@Service
public class MQTTService implements MqttCallback {

    private static final String BROKER_URL = "tcp://broker.hivemq.com:1883";
    private static final String TOPICO_ENTRADA = "dados_processados/todos";
    private static final String TOPICO_BASE_CLIENTE = "cliente_";

    private MqttClient client;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @PostConstruct
    public void start() {
        try {
            client = new MqttClient(BROKER_URL, MqttClient.generateClientId());
            MqttConnectOptions options = new MqttConnectOptions();
            options.setAutomaticReconnect(true);
            options.setCleanSession(true);

            client.setCallback(this); 
            client.connect(options);

            client.subscribe(TOPICO_ENTRADA);

            System.out.println("Conectado ao broker MQTT e inscrito em " + TOPICO_ENTRADA);
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void messageArrived(String topic, MqttMessage message) {
    	String payload = new String(message.getPayload());
    	System.out.println("Mensagem recebida em '" + topic + "': " + payload);

    	try {
    	    String[] partes = payload.split("]");
    	    String regiao = partes[0].replace("[", "").trim(); // NORTE
    	    String valoresBrutos = partes[1].replace("[", "").trim(); // "34,19 | 35,78 | 963,58 | 734,46"

    	    String[] valores = valoresBrutos.split("\\|");
    	    List<Double> numeros = Arrays.stream(valores)
    	        .map(v -> v.replace(",", ".").trim()) // converte vírgula para ponto
    	        .map(Double::parseDouble)
    	        .toList();

    	    // Agora você tem: regiao = "NORTE", numeros = lista de doubles
    	    // Exemplo: publique no tópico específico do cliente
    	    String topicoCliente = "cliente_" + regiao.toLowerCase();
    	    String novaMensagem = "Dados da região " + regiao + ": " + numeros;

    	    client.publish(topicoCliente, new MqttMessage(novaMensagem.getBytes()));
    	    System.out.println("Publicado em '" + topicoCliente + "': " + novaMensagem);

    	} catch (Exception e) {
    	    System.err.println("Erro ao processar mensagem: " + e.getMessage());
    	    e.printStackTrace();
    	}

    }

    @Override
    public void connectionLost(Throwable cause) {
        System.err.println("Conexão perdida com o broker: " + cause.getMessage());
    }

    @Override
    public void deliveryComplete(IMqttDeliveryToken token) {
        // Pode ser usado para confirmar publicação, se necessário
    }
}


