package com.ufersa.amqpservice;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

@RestController
@RequestMapping("/amqpservice")
public class AMQPController {

    private static final String ARQUIVO_DADOS = "rabbitmq/dados_recebidos.txt";

    @GetMapping("/broker")
    public Map<String, String> obterBrokerRabbitMQ() {
        Map<String, String> response = new HashMap<>();
        response.put("host", "broker.rabbitmq-cliente");  // Broker do qual os clientes vão consumir
        response.put("port", "5673");
        return response;
    }

    @GetMapping("/historico")
    public ResponseEntity<?> consultarHistorico() {
        File arquivo = new File(ARQUIVO_DADOS);
        if (!arquivo.exists()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Arquivo de histórico não encontrado.");
        }

        try (Scanner leitor = new Scanner(arquivo)) {
            List<String> linhas = new ArrayList<>();
            while (leitor.hasNextLine()) {
                linhas.add(leitor.nextLine());
            }
            return ResponseEntity.ok(linhas);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Erro ao ler histórico: " + e.getMessage());
        }
    }

    public void publicarEmNovoBroker(String queueName, String mensagem) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("broker.rabbitmq-cliente");
        factory.setPort(5673);  // Novo broker para os clientes

        try (Connection connection = factory.newConnection();
             Channel channel = connection.createChannel()) {

            channel.queueDeclare(queueName, false, false, false, null);
            channel.basicPublish("", queueName, null, mensagem.getBytes(StandardCharsets.UTF_8));
        }
    }

    public void salvarEmArquivo(String dado) {
        File dir = new File("rabbitmq");
        if (!dir.exists()) dir.mkdirs();

        File arquivo = new File(dir, "dados_recebidos.txt");
        try (FileWriter fw = new FileWriter(arquivo, true);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            out.println(dado);
        } catch (IOException e) {
            System.out.println("Erro ao salvar no arquivo: " + e.getMessage());
        }
    }

    // Método que simula o recebimento de uma mensagem no amqpservice
    public void processarMensagemRecebida(String queueName, String dado) {
        salvarEmArquivo(dado);
        try {
            publicarEmNovoBroker(queueName, dado);
        } catch (Exception e) {
            System.out.println("Erro ao publicar no novo broker: " + e.getMessage());
        }
    }
}

