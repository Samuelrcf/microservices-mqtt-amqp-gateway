package com.ufersa.amqpservice.services;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Service;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import jakarta.annotation.PostConstruct;

@Service
public class AMQPService {

    private static final String ARQUIVO_DADOS = "rabbitmq/dados_recebidos.txt";
    private static final List<String> FILAS_PROCESSADAS = Arrays.asList(
            "dados_processados_todos",
            "dados_processados_norte",
            "dados_processados_sul",
            "dados_processados_leste",
            "dados_processados_oeste"
    );

    private static final String BROKER_HOST = "localhost";
    private static final int BROKER_PORT = 5672;

    @PostConstruct
    public void iniciar() {
        try {
            ConnectionFactory factory = new ConnectionFactory();
            factory.setHost(BROKER_HOST);
            factory.setPort(BROKER_PORT);
            Connection connection = factory.newConnection();
            Channel channel = connection.createChannel();

            for (String fila : FILAS_PROCESSADAS) {
                channel.queueDeclare(fila, false, false, false, null);
                channel.basicConsume(fila, false, (consumerTag, delivery) -> {
                    String dado = new String(delivery.getBody(), StandardCharsets.UTF_8);
                    System.out.println("Recebido [" + fila + "]: " + dado);
                    salvarEmArquivo(dado);
                    publicarParaCliente(channel, dado);
                }, consumerTag -> {});
            }

            System.out.println("AMQPService escutando filas de dados processados...");

        } catch (Exception e) {
            System.err.println("Erro ao iniciar AMQPService: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void publicarParaCliente(Channel channel, String dado) {
        try {
            // Extraindo a região da mensagem
            String[] partes = dado.split("]");
            String regiao = partes[0].replace("[", "").trim().toLowerCase(); // Ex: "norte"
            String filaCliente = "cliente_" + regiao;

            // Publicando
            channel.queueDeclare(filaCliente, true, false, false, null);
            channel.basicPublish("", filaCliente, null, dado.getBytes(StandardCharsets.UTF_8));

            System.out.println("Publicado em '" + filaCliente + "': " + dado);

        } catch (Exception e) {
            System.err.println("Erro ao publicar para cliente: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void salvarEmArquivo(String dado) {
        File dir = new File("rabbitmq");
        if (!dir.exists()) {
            dir.mkdirs();
        }

        File arquivo = new File(dir, "dados_recebidos.txt");

        try (FileWriter fw = new FileWriter(arquivo, true);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {

            out.println(dado);

        } catch (IOException e) {
            System.err.println("Erro ao salvar no arquivo: " + e.getMessage());
        }
    }

    public List<String> lerHistorico() {
        File arquivo = new File(ARQUIVO_DADOS);
        if (!arquivo.exists()) return List.of();

        try (BufferedReader reader = new BufferedReader(new FileReader(arquivo))) {
            return reader.lines().toList();
        } catch (IOException e) {
            System.err.println("Erro ao ler histórico: " + e.getMessage());
            return List.of();
        }
    }
}


