package com.ufersa.mqttservice.services;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.annotation.PostConstruct;

@Service
public class MQTTService implements MqttCallback {

    private static final String BROKER_URL = "tcp://broker.hivemq.com:1883";
    private static final String TOPICO_ENTRADA = "dados_processados/todos";
    private static final String TOPICO_BASE_CLIENTE = "cliente_";

    private MqttClient client;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @PostConstruct
    public void start() {
        try {
            client = new MqttClient(BROKER_URL, MqttClient.generateClientId());
            MqttConnectOptions options = new MqttConnectOptions();
            options.setAutomaticReconnect(true);
            options.setCleanSession(true);

            client.setCallback(this); // <-- Importante: define o callback
            client.connect(options);

            client.subscribe(TOPICO_ENTRADA);

            System.out.println("Conectado ao broker MQTT e inscrito em " + TOPICO_ENTRADA);
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }

    // Callback: mensagem recebida
    @Override
    public void messageArrived(String topic, MqttMessage message) {
        try {
            String payload = new String(message.getPayload());
            System.out.println("Mensagem recebida em '" + topic + "': " + payload);

            JsonNode json = objectMapper.readTree(payload);
            String regiao = json.has("regiao") ? json.get("regiao").asText().toLowerCase() : "desconhecida";

            // Publicar em cliente_todos
            client.publish(TOPICO_BASE_CLIENTE + "todos", new MqttMessage(payload.getBytes()));

            // Publicar em cliente_regiao (se houver)
            client.publish(TOPICO_BASE_CLIENTE + regiao, new MqttMessage(payload.getBytes()));

            System.out.println("Publicado em: cliente_todos e cliente_" + regiao);
        } catch (Exception e) {
            System.err.println("Erro ao processar mensagem: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public void connectionLost(Throwable cause) {
        System.err.println("Conexão perdida com o broker: " + cause.getMessage());
    }

    @Override
    public void deliveryComplete(IMqttDeliveryToken token) {
        // Pode ser usado para confirmar publicação, se necessário
    }
}


